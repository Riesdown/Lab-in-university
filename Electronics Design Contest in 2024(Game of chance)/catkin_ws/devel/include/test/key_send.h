// Generated by gencpp from file test/key_send.msg
// DO NOT EDIT!


#ifndef TEST_MESSAGE_KEY_SEND_H
#define TEST_MESSAGE_KEY_SEND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test
{
template <class ContainerAllocator>
struct key_send_
{
  typedef key_send_<ContainerAllocator> Type;

  key_send_()
    : chess_change(0)
    , chess_num(0)
    , position(0)  {
    }
  key_send_(const ContainerAllocator& _alloc)
    : chess_change(0)
    , chess_num(0)
    , position(0)  {
  (void)_alloc;
    }



   typedef int32_t _chess_change_type;
  _chess_change_type chess_change;

   typedef int32_t _chess_num_type;
  _chess_num_type chess_num;

   typedef int32_t _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::test::key_send_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test::key_send_<ContainerAllocator> const> ConstPtr;

}; // struct key_send_

typedef ::test::key_send_<std::allocator<void> > key_send;

typedef boost::shared_ptr< ::test::key_send > key_sendPtr;
typedef boost::shared_ptr< ::test::key_send const> key_sendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test::key_send_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test::key_send_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test::key_send_<ContainerAllocator1> & lhs, const ::test::key_send_<ContainerAllocator2> & rhs)
{
  return lhs.chess_change == rhs.chess_change &&
    lhs.chess_num == rhs.chess_num &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test::key_send_<ContainerAllocator1> & lhs, const ::test::key_send_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test::key_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test::key_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test::key_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test::key_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::key_send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::key_send_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test::key_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f77ffe24d4ef0b7fc703ecd866700bb";
  }

  static const char* value(const ::test::key_send_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f77ffe24d4ef0b7ULL;
  static const uint64_t static_value2 = 0xfc703ecd866700bbULL;
};

template<class ContainerAllocator>
struct DataType< ::test::key_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test/key_send";
  }

  static const char* value(const ::test::key_send_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test::key_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 chess_change      # 棋子改变\n"
"int32 chess_num         # 棋子编号\n"
"int32 position          # 位置\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::test::key_send_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test::key_send_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chess_change);
      stream.next(m.chess_num);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct key_send_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test::key_send_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test::key_send_<ContainerAllocator>& v)
  {
    s << indent << "chess_change: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chess_change);
    s << indent << "chess_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chess_num);
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_MESSAGE_KEY_SEND_H
