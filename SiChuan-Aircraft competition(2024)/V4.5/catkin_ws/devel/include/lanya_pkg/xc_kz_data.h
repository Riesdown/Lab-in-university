// Generated by gencpp from file lanya_pkg/xc_kz_data.msg
// DO NOT EDIT!


#ifndef LANYA_PKG_MESSAGE_XC_KZ_DATA_H
#define LANYA_PKG_MESSAGE_XC_KZ_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lanya_pkg
{
template <class ContainerAllocator>
struct xc_kz_data_
{
  typedef xc_kz_data_<ContainerAllocator> Type;

  xc_kz_data_()
    : kz_str()  {
    }
  xc_kz_data_(const ContainerAllocator& _alloc)
    : kz_str(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _kz_str_type;
  _kz_str_type kz_str;





  typedef boost::shared_ptr< ::lanya_pkg::xc_kz_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lanya_pkg::xc_kz_data_<ContainerAllocator> const> ConstPtr;

}; // struct xc_kz_data_

typedef ::lanya_pkg::xc_kz_data_<std::allocator<void> > xc_kz_data;

typedef boost::shared_ptr< ::lanya_pkg::xc_kz_data > xc_kz_dataPtr;
typedef boost::shared_ptr< ::lanya_pkg::xc_kz_data const> xc_kz_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lanya_pkg::xc_kz_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lanya_pkg::xc_kz_data_<ContainerAllocator1> & lhs, const ::lanya_pkg::xc_kz_data_<ContainerAllocator2> & rhs)
{
  return lhs.kz_str == rhs.kz_str;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lanya_pkg::xc_kz_data_<ContainerAllocator1> & lhs, const ::lanya_pkg::xc_kz_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lanya_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lanya_pkg::xc_kz_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lanya_pkg::xc_kz_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lanya_pkg::xc_kz_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "faf6e880b42507c6d64b003da8b79bd3";
  }

  static const char* value(const ::lanya_pkg::xc_kz_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfaf6e880b42507c6ULL;
  static const uint64_t static_value2 = 0xd64b003da8b79bd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lanya_pkg/xc_kz_data";
  }

  static const char* value(const ::lanya_pkg::xc_kz_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string kz_str\n"
;
  }

  static const char* value(const ::lanya_pkg::xc_kz_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kz_str);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xc_kz_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lanya_pkg::xc_kz_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lanya_pkg::xc_kz_data_<ContainerAllocator>& v)
  {
    s << indent << "kz_str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.kz_str);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANYA_PKG_MESSAGE_XC_KZ_DATA_H
