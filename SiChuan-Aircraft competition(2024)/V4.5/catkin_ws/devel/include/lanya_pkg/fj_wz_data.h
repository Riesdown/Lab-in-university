// Generated by gencpp from file lanya_pkg/fj_wz_data.msg
// DO NOT EDIT!


#ifndef LANYA_PKG_MESSAGE_FJ_WZ_DATA_H
#define LANYA_PKG_MESSAGE_FJ_WZ_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lanya_pkg
{
template <class ContainerAllocator>
struct fj_wz_data_
{
  typedef fj_wz_data_<ContainerAllocator> Type;

  fj_wz_data_()
    : fj_x(0.0)
    , fj_y(0.0)  {
    }
  fj_wz_data_(const ContainerAllocator& _alloc)
    : fj_x(0.0)
    , fj_y(0.0)  {
  (void)_alloc;
    }



   typedef float _fj_x_type;
  _fj_x_type fj_x;

   typedef float _fj_y_type;
  _fj_y_type fj_y;





  typedef boost::shared_ptr< ::lanya_pkg::fj_wz_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lanya_pkg::fj_wz_data_<ContainerAllocator> const> ConstPtr;

}; // struct fj_wz_data_

typedef ::lanya_pkg::fj_wz_data_<std::allocator<void> > fj_wz_data;

typedef boost::shared_ptr< ::lanya_pkg::fj_wz_data > fj_wz_dataPtr;
typedef boost::shared_ptr< ::lanya_pkg::fj_wz_data const> fj_wz_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lanya_pkg::fj_wz_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lanya_pkg::fj_wz_data_<ContainerAllocator1> & lhs, const ::lanya_pkg::fj_wz_data_<ContainerAllocator2> & rhs)
{
  return lhs.fj_x == rhs.fj_x &&
    lhs.fj_y == rhs.fj_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lanya_pkg::fj_wz_data_<ContainerAllocator1> & lhs, const ::lanya_pkg::fj_wz_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lanya_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lanya_pkg::fj_wz_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lanya_pkg::fj_wz_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lanya_pkg::fj_wz_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11a2e9cf43a8ca7a8685679601c4ed90";
  }

  static const char* value(const ::lanya_pkg::fj_wz_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11a2e9cf43a8ca7aULL;
  static const uint64_t static_value2 = 0x8685679601c4ed90ULL;
};

template<class ContainerAllocator>
struct DataType< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lanya_pkg/fj_wz_data";
  }

  static const char* value(const ::lanya_pkg::fj_wz_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 fj_x\n"
"float32 fj_y\n"
;
  }

  static const char* value(const ::lanya_pkg::fj_wz_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fj_x);
      stream.next(m.fj_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fj_wz_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lanya_pkg::fj_wz_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lanya_pkg::fj_wz_data_<ContainerAllocator>& v)
  {
    s << indent << "fj_x: ";
    Printer<float>::stream(s, indent + "  ", v.fj_x);
    s << indent << "fj_y: ";
    Printer<float>::stream(s, indent + "  ", v.fj_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANYA_PKG_MESSAGE_FJ_WZ_DATA_H
