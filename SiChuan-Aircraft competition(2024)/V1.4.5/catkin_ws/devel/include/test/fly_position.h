// Generated by gencpp from file test/fly_position.msg
// DO NOT EDIT!


#ifndef TEST_MESSAGE_FLY_POSITION_H
#define TEST_MESSAGE_FLY_POSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test
{
template <class ContainerAllocator>
struct fly_position_
{
  typedef fly_position_<ContainerAllocator> Type;

  fly_position_()
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)
    , x5(0.0)
    , y5(0.0)
    , x6(0.0)
    , y6(0.0)  {
    }
  fly_position_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)
    , x5(0.0)
    , y5(0.0)
    , x6(0.0)
    , y6(0.0)  {
  (void)_alloc;
    }



   typedef float _x1_type;
  _x1_type x1;

   typedef float _y1_type;
  _y1_type y1;

   typedef float _x2_type;
  _x2_type x2;

   typedef float _y2_type;
  _y2_type y2;

   typedef float _x3_type;
  _x3_type x3;

   typedef float _y3_type;
  _y3_type y3;

   typedef float _x4_type;
  _x4_type x4;

   typedef float _y4_type;
  _y4_type y4;

   typedef float _x5_type;
  _x5_type x5;

   typedef float _y5_type;
  _y5_type y5;

   typedef float _x6_type;
  _x6_type x6;

   typedef float _y6_type;
  _y6_type y6;





  typedef boost::shared_ptr< ::test::fly_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test::fly_position_<ContainerAllocator> const> ConstPtr;

}; // struct fly_position_

typedef ::test::fly_position_<std::allocator<void> > fly_position;

typedef boost::shared_ptr< ::test::fly_position > fly_positionPtr;
typedef boost::shared_ptr< ::test::fly_position const> fly_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test::fly_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test::fly_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test::fly_position_<ContainerAllocator1> & lhs, const ::test::fly_position_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.x3 == rhs.x3 &&
    lhs.y3 == rhs.y3 &&
    lhs.x4 == rhs.x4 &&
    lhs.y4 == rhs.y4 &&
    lhs.x5 == rhs.x5 &&
    lhs.y5 == rhs.y5 &&
    lhs.x6 == rhs.x6 &&
    lhs.y6 == rhs.y6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test::fly_position_<ContainerAllocator1> & lhs, const ::test::fly_position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test::fly_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test::fly_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test::fly_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test::fly_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::fly_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::fly_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test::fly_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3c31e442f291e7849f095629277239d";
  }

  static const char* value(const ::test::fly_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3c31e442f291e78ULL;
  static const uint64_t static_value2 = 0x49f095629277239dULL;
};

template<class ContainerAllocator>
struct DataType< ::test::fly_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test/fly_position";
  }

  static const char* value(const ::test::fly_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test::fly_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32  x1\n"
"float32  y1\n"
"\n"
"float32  x2\n"
"float32  y2\n"
"\n"
"float32  x3\n"
"float32  y3\n"
"\n"
"float32  x4\n"
"float32  y4\n"
"\n"
"float32  x5\n"
"float32  y5\n"
"\n"
"float32  x6\n"
"float32  y6\n"
;
  }

  static const char* value(const ::test::fly_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test::fly_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.x4);
      stream.next(m.y4);
      stream.next(m.x5);
      stream.next(m.y5);
      stream.next(m.x6);
      stream.next(m.y6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fly_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test::fly_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test::fly_position_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<float>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<float>::stream(s, indent + "  ", v.y2);
    s << indent << "x3: ";
    Printer<float>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<float>::stream(s, indent + "  ", v.y3);
    s << indent << "x4: ";
    Printer<float>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<float>::stream(s, indent + "  ", v.y4);
    s << indent << "x5: ";
    Printer<float>::stream(s, indent + "  ", v.x5);
    s << indent << "y5: ";
    Printer<float>::stream(s, indent + "  ", v.y5);
    s << indent << "x6: ";
    Printer<float>::stream(s, indent + "  ", v.x6);
    s << indent << "y6: ";
    Printer<float>::stream(s, indent + "  ", v.y6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_MESSAGE_FLY_POSITION_H
