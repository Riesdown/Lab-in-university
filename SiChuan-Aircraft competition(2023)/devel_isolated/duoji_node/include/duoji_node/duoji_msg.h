// Generated by gencpp from file duoji_node/duoji_msg.msg
// DO NOT EDIT!


#ifndef DUOJI_NODE_MESSAGE_DUOJI_MSG_H
#define DUOJI_NODE_MESSAGE_DUOJI_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duoji_node
{
template <class ContainerAllocator>
struct duoji_msg_
{
  typedef duoji_msg_<ContainerAllocator> Type;

  duoji_msg_()
    : Duoji_angle(0)  {
    }
  duoji_msg_(const ContainerAllocator& _alloc)
    : Duoji_angle(0)  {
  (void)_alloc;
    }



   typedef int32_t _Duoji_angle_type;
  _Duoji_angle_type Duoji_angle;





  typedef boost::shared_ptr< ::duoji_node::duoji_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duoji_node::duoji_msg_<ContainerAllocator> const> ConstPtr;

}; // struct duoji_msg_

typedef ::duoji_node::duoji_msg_<std::allocator<void> > duoji_msg;

typedef boost::shared_ptr< ::duoji_node::duoji_msg > duoji_msgPtr;
typedef boost::shared_ptr< ::duoji_node::duoji_msg const> duoji_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duoji_node::duoji_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duoji_node::duoji_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duoji_node::duoji_msg_<ContainerAllocator1> & lhs, const ::duoji_node::duoji_msg_<ContainerAllocator2> & rhs)
{
  return lhs.Duoji_angle == rhs.Duoji_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duoji_node::duoji_msg_<ContainerAllocator1> & lhs, const ::duoji_node::duoji_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duoji_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::duoji_node::duoji_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duoji_node::duoji_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duoji_node::duoji_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duoji_node::duoji_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duoji_node::duoji_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duoji_node::duoji_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duoji_node::duoji_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bb68250934646b96771efd253d0ba16";
  }

  static const char* value(const ::duoji_node::duoji_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bb68250934646b9ULL;
  static const uint64_t static_value2 = 0x6771efd253d0ba16ULL;
};

template<class ContainerAllocator>
struct DataType< ::duoji_node::duoji_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duoji_node/duoji_msg";
  }

  static const char* value(const ::duoji_node::duoji_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duoji_node::duoji_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Duoji_angle\n"
;
  }

  static const char* value(const ::duoji_node::duoji_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duoji_node::duoji_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Duoji_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct duoji_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duoji_node::duoji_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duoji_node::duoji_msg_<ContainerAllocator>& v)
  {
    s << indent << "Duoji_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Duoji_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUOJI_NODE_MESSAGE_DUOJI_MSG_H
