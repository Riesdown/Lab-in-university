// Generated by gencpp from file number_recognize_node/numeber_info_msgs.msg
// DO NOT EDIT!


#ifndef NUMBER_RECOGNIZE_NODE_MESSAGE_NUMEBER_INFO_MSGS_H
#define NUMBER_RECOGNIZE_NODE_MESSAGE_NUMEBER_INFO_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace number_recognize_node
{
template <class ContainerAllocator>
struct numeber_info_msgs_
{
  typedef numeber_info_msgs_<ContainerAllocator> Type;

  numeber_info_msgs_()
    : num(0)
    , center_x(0)
    , center_y(0)
    , flag(false)  {
    }
  numeber_info_msgs_(const ContainerAllocator& _alloc)
    : num(0)
    , center_x(0)
    , center_y(0)
    , flag(false)  {
  (void)_alloc;
    }



   typedef int32_t _num_type;
  _num_type num;

   typedef int32_t _center_x_type;
  _center_x_type center_x;

   typedef int32_t _center_y_type;
  _center_y_type center_y;

   typedef uint8_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct numeber_info_msgs_

typedef ::number_recognize_node::numeber_info_msgs_<std::allocator<void> > numeber_info_msgs;

typedef boost::shared_ptr< ::number_recognize_node::numeber_info_msgs > numeber_info_msgsPtr;
typedef boost::shared_ptr< ::number_recognize_node::numeber_info_msgs const> numeber_info_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator1> & lhs, const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.center_x == rhs.center_x &&
    lhs.center_y == rhs.center_y &&
    lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator1> & lhs, const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace number_recognize_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d26e9a9b11d6e0b99d95bf5f9545549a";
  }

  static const char* value(const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd26e9a9b11d6e0b9ULL;
  static const uint64_t static_value2 = 0x9d95bf5f9545549aULL;
};

template<class ContainerAllocator>
struct DataType< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "number_recognize_node/numeber_info_msgs";
  }

  static const char* value(const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num\n"
"int32 center_x\n"
"int32 center_y\n"
"bool flag\n"
;
  }

  static const char* value(const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct numeber_info_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::number_recognize_node::numeber_info_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::number_recognize_node::numeber_info_msgs_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "center_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_y);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUMBER_RECOGNIZE_NODE_MESSAGE_NUMEBER_INFO_MSGS_H
