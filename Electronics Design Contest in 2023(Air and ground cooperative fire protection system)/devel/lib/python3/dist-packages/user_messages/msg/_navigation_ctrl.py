# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from user_messages/navigation_ctrl.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class navigation_ctrl(genpy.Message):
  _md5sum = "57540d12dfd9892331224880fa18114a"
  _type = "user_messages/navigation_ctrl"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
float32 z
uint8 nav_mode
uint8 frame_id
uint16 num
uint32 execution_time
uint8 update_flag

uint8 BODY_FRAME=0
uint8 MAP_FRAME=1
uint8 RELATIVE_MODE=0
uint8 GLOBAL_MODE=1
uint8 CMD_VEL_MODE=2"""
  # Pseudo-constants
  BODY_FRAME = 0
  MAP_FRAME = 1
  RELATIVE_MODE = 0
  GLOBAL_MODE = 1
  CMD_VEL_MODE = 2

  __slots__ = ['x','y','z','nav_mode','frame_id','num','execution_time','update_flag']
  _slot_types = ['float32','float32','float32','uint8','uint8','uint16','uint32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,nav_mode,frame_id,num,execution_time,update_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(navigation_ctrl, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.nav_mode is None:
        self.nav_mode = 0
      if self.frame_id is None:
        self.frame_id = 0
      if self.num is None:
        self.num = 0
      if self.execution_time is None:
        self.execution_time = 0
      if self.update_flag is None:
        self.update_flag = 0
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.nav_mode = 0
      self.frame_id = 0
      self.num = 0
      self.execution_time = 0
      self.update_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f2BHIB().pack(_x.x, _x.y, _x.z, _x.nav_mode, _x.frame_id, _x.num, _x.execution_time, _x.update_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.x, _x.y, _x.z, _x.nav_mode, _x.frame_id, _x.num, _x.execution_time, _x.update_flag,) = _get_struct_3f2BHIB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f2BHIB().pack(_x.x, _x.y, _x.z, _x.nav_mode, _x.frame_id, _x.num, _x.execution_time, _x.update_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.x, _x.y, _x.z, _x.nav_mode, _x.frame_id, _x.num, _x.execution_time, _x.update_flag,) = _get_struct_3f2BHIB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f2BHIB = None
def _get_struct_3f2BHIB():
    global _struct_3f2BHIB
    if _struct_3f2BHIB is None:
        _struct_3f2BHIB = struct.Struct("<3f2BHIB")
    return _struct_3f2BHIB
