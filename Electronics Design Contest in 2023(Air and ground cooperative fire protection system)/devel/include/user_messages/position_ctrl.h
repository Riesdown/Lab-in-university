// Generated by gencpp from file user_messages/position_ctrl.msg
// DO NOT EDIT!


#ifndef USER_MESSAGES_MESSAGE_POSITION_CTRL_H
#define USER_MESSAGES_MESSAGE_POSITION_CTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace user_messages
{
template <class ContainerAllocator>
struct position_ctrl_
{
  typedef position_ctrl_<ContainerAllocator> Type;

  position_ctrl_()
    : move_flag(0)
    , move_order(0)
    , move_distance(0)  {
    }
  position_ctrl_(const ContainerAllocator& _alloc)
    : move_flag(0)
    , move_order(0)
    , move_distance(0)  {
  (void)_alloc;
    }



   typedef uint8_t _move_flag_type;
  _move_flag_type move_flag;

   typedef uint8_t _move_order_type;
  _move_order_type move_order;

   typedef uint16_t _move_distance_type;
  _move_distance_type move_distance;





  typedef boost::shared_ptr< ::user_messages::position_ctrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_messages::position_ctrl_<ContainerAllocator> const> ConstPtr;

}; // struct position_ctrl_

typedef ::user_messages::position_ctrl_<std::allocator<void> > position_ctrl;

typedef boost::shared_ptr< ::user_messages::position_ctrl > position_ctrlPtr;
typedef boost::shared_ptr< ::user_messages::position_ctrl const> position_ctrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::user_messages::position_ctrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::user_messages::position_ctrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::user_messages::position_ctrl_<ContainerAllocator1> & lhs, const ::user_messages::position_ctrl_<ContainerAllocator2> & rhs)
{
  return lhs.move_flag == rhs.move_flag &&
    lhs.move_order == rhs.move_order &&
    lhs.move_distance == rhs.move_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::user_messages::position_ctrl_<ContainerAllocator1> & lhs, const ::user_messages::position_ctrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace user_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::user_messages::position_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::user_messages::position_ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_messages::position_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::user_messages::position_ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_messages::position_ctrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::user_messages::position_ctrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::user_messages::position_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b35dc4f304f0d5f7eaa8dda10fe4862";
  }

  static const char* value(const ::user_messages::position_ctrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b35dc4f304f0d5fULL;
  static const uint64_t static_value2 = 0x7eaa8dda10fe4862ULL;
};

template<class ContainerAllocator>
struct DataType< ::user_messages::position_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "user_messages/position_ctrl";
  }

  static const char* value(const ::user_messages::position_ctrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::user_messages::position_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 move_flag\n"
"uint8 move_order\n"
"uint16 move_distance\n"
;
  }

  static const char* value(const ::user_messages::position_ctrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::user_messages::position_ctrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_flag);
      stream.next(m.move_order);
      stream.next(m.move_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_ctrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_messages::position_ctrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::user_messages::position_ctrl_<ContainerAllocator>& v)
  {
    s << indent << "move_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_flag);
    s << indent << "move_order: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_order);
    s << indent << "move_distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.move_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USER_MESSAGES_MESSAGE_POSITION_CTRL_H
